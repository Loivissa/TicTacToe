-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://ghttps://github.com/Loivissa/TicTacToe#readme</a>
@package projekt
@version 0.1.0.0

module Lib
someFunc :: IO ()

module TicTacToeEngine

-- | <tt>Board</tt> represents the board for the Tic Tac Toe game. Starting
--   board is represented by <tt>newBoard</tt>, which is an empty 3x3 Tic
--   Tac Toe board. It's rows and columns are numbered from 0 to 2. Those
--   numbers are used to specify where do you want to move. (See
--   <tt>makeAMove</tt> for the exact way to specify where do you want to
--   place your mark)
type Board = Array (Int, Int) Field

-- | <tt>Field</tt> describes a possible state of a field on the playing
--   board (represented by <tt>Board</tt>). A <tt>Field</tt> can be
--   <tt>Empty</tt>, can have a <tt>Cross</tt> or a <tt>Circle</tt>.
data Field
Empty :: Field
Cross :: Field
Circle :: Field

-- | <tt>GameStatus</tt> is a variable describing the state of the game -
--   did it end or not and what is a result? <tt>InProgress</tt> indicates
--   that the game hasn't ended yet. <tt>CircleWon</tt>, <tt>CrossWon</tt>
--   an <tt>Stalemate</tt> indicate both the fact that the game has ended
--   and the result.
data GameStatus
InProgress :: GameStatus
CrossWon :: GameStatus
CircleWon :: GameStatus
Stalemate :: GameStatus

-- | <tt>newBoard</tt> creates a new, empty <tt>Board</tt> (See
--   <tt>Board</tt>)
newBoard :: Board

-- | <tt>makeAMove</tt> returns <tt>Just Board</tt> after making a
--   specified move or <tt>Nothing</tt> if move is impossible. Move is
--   specified by the current game represented by a <tt>Board</tt>, a
--   <tt>Field</tt> indicating whether we want to place a <tt>Circle</tt>
--   or a <tt>Cross</tt> and <tt>(Int,Int)</tt> index (i,j) with i
--   representing a row number and j representing a column number. Example:
--   <tt>makeAMove board Circle (0,2)</tt> "puts" a <tt>Circle</tt> in
--   field in row 0, column 2, if possible, returns <tt>Nothing</tt> if
--   impossible. (See <tt>Board</tt> for the layout of the board)
makeAMove :: Board -> Field -> (Int, Int) -> Maybe Board

-- | takes a <tt>Board</tt>, returns information about status
--   (<tt>GameStatus</tt>): is it won by circles, by crosses, is it a
--   stalemate or is it ongoing? (See <tt>GameStatus</tt>)
seeGameStatus :: Board -> GameStatus
instance GHC.Show.Show TicTacToeEngine.GameStatus
instance GHC.Show.Show TicTacToeEngine.Field
instance GHC.Classes.Eq TicTacToeEngine.GameStatus
instance GHC.Classes.Eq TicTacToeEngine.Field

module TicTacToeBoard

-- | <tt>convertFieldToString</tt> takes a <tt>Field</tt> and returns its
--   <tt>String</tt> representation on displayed board. For <tt>Cross</tt>
--   it returns <a>X</a>, for <tt>Circle</tt> <a>O</a> end por
--   <tt>Empty</tt> just space " ". (See <tt>Field</tt>)
convertFieldToString :: Field -> String

-- | <tt>boardToString</tt> takes the <tt>Board</tt> and returns its
--   <tt>String</tt> representation. (See <tt>Board</tt>)
boardToString :: Board -> String

-- | <tt>eliminate</tt> converts <tt>Maybe</tt> <tt>Board</tt> into
--   <tt>Board</tt>. If the <tt>Board</tt> is <tt>Nothing</tt> returns
--   <tt>newBoard</tt> (See <tt>newBoard</tt>)
eliminate :: Maybe Board -> Board

-- | <tt>help</tt> returns <tt>String</tt> in which whole board is
--   displayed with numbers to help player choose the field they are going
--   to fill.
help :: String

-- | <tt>eliminate2</tt> converts <tt>Maybe</tt> <tt>Int</tt> int
--   <tt>Int</tt>
eliminate2 :: Maybe Int -> Int

module TicTacToePlayer

-- | <tt>sensiblyDecideHowToMove</tt> takes a <tt>Board</tt> and a
--   <tt>Field</tt> representing whether it is a <tt>Cross</tt> or a
--   <tt>Circle</tt> move. It returns a new <tt>Board</tt> (either as a
--   <tt>Just Board</tt> or <tt>Nothing</tt> if there is no possible move)
--   after making a move that should either seize victory if it's
--   immediately available, prevent the enemy from doing the same or - if
--   none of those are available - simply places a required <tt>Cross</tt>
--   or <tt>Circle</tt> in the first possible place.
sensiblyDecideHowToMove :: Field -> Board -> Maybe Board

-- | <tt>lazilyDecideHowToMove</tt> takes a <tt>Board</tt> and a
--   <tt>Field</tt> representing whether it is a <tt>Cross</tt> or a
--   <tt>Circle</tt> move. It returns a new <tt>Board</tt> after making a
--   first possible move - either as a <tt>Just Board</tt> or
--   <tt>Nothing</tt> if there is no possible move.
lazilyDecideHowToMove :: Field -> Board -> Maybe Board

-- | <tt>oneDimIndexToTwoDim</tt> converts number of field into two
--   dimensional index.
oneDimIndexToTwoDim :: Int -> (Int, Int)

-- | <tt>otherPlayersField</tt> returns next type of sign for the next
--   player. Next for <tt>Cross</tt> is <tt>Circle</tt> and vice versa.
otherPlayersField :: Field -> Field

-- | <tt>firstEmptyPlace</tt> searches for first <tt>Empty</tt> place in
--   the <tt>Board</tt>
firstEmptyPlace :: Board -> (Int, Int)

module TicTacToeGame

-- | <tt>playAGame</tt> starts a game based on players decisions (who
--   starts, hard or easy mode)
playAGame :: IO ()

-- | <tt>gameLoop</tt> handles game between player and computer. First
--   instance interprets players intentions. Second makes moves as
--   computer.
gameLoop :: Int -> Field -> Int -> Board -> IO ()
