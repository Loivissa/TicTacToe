
==================== FINAL INTERFACE ====================
2018-01-26 11:05:28.5984074 UTC

interface projekt-0.1.0.0-L2R9sX9EbLN31CCNRW6qUq:TicTacToePlayer 8022
  interface hash: e03f00c0d9cf0e97be8eb79ac2169027
  ABI hash: fdecdc42082f879cc4db25c38a83dd5d
  export-list hash: 213840aff8cd79d0a89a9138f49076bd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 73bbfb07a2cc198332f47c5c19438df4
  sig of: Nothing
  used TH splices: False
  where
exports:
  TicTacToePlayer.firstEmptyPlace
  TicTacToePlayer.lazilyDecideHowToMove
  TicTacToePlayer.oneDimIndexToTwoDim
  TicTacToePlayer.otherPlayersField
  TicTacToePlayer.sensiblyDecideHowToMove
module dependencies: TicTacToeEngine
package dependencies: array-0.5.2.0* base-4.10.1.0*
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  array-0.5.2.0:Data.Array 869b69aac66df5e34601dac3d3170393
import  -/  base-4.10.1.0:Data.Maybe f51a1c24c4c11dca22ee9c2ea0071a10
import  -/  base-4.10.1.0:GHC.Arr 80cd02c1e00d7b9b0ac8f460e89b2871
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  TicTacToeEngine 909995f5ec0e675aac39c47c1257f0ab
  exports: 4037410c300a2034b44b1bf9e446b1c0
  Board cdc9ca8fe3ce0d0e3d76e1f010a45a4e
  Circle e953e5093748c5b431ad2d73946ffd08
  Cross 4858f5bda1812586d560b49c2e116b15
  Empty 9b71454ee1387f9f2b4e66f41a193bff
  Field d4917fad7dd87b3d2ead74ed280a312b
  InProgress 96720747cc025fbcbccbe2ec853c95de
  makeAMove 2482d6eced4428c06f8ecc51002d2ae4
  seeGameStatus cb51075f31a12f8e4fd07d29a8e65288
d594141a85a7f7c0cb17a5953e02b69a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TicTacToePlayer.$trModule3
                   TicTacToePlayer.$trModule1) -}
2704b8cf3359c8759847bc38e99f40ba
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToePlayer.$trModule2) -}
9733603fd1dc9860f56d07a7b70d91e8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TicTacToePlayer"#) -}
4792ca0e3838bf6bc9dec98f46e7ddb8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToePlayer.$trModule4) -}
f388e59b89cbfccbbd5b384e4746fe8c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("projekt-0.1.0.0-L2R9sX9EbLN31CCNRW6qUq"#) -}
2537263180a9b0a07784aac568fb6704
  $wfirstEmptyPlace ::
    TicTacToeEngine.Board -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,1*U(A,A,U,U)>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.Board) ->
                 let {
                   index :: GHC.Types.Int
                   = case w of wild { GHC.Arr.Array ds ds1 dt ds2 ->
                     let {
                       y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># 0# y) of wild1 {
                       GHC.Types.False
                       -> letrec {
                            go :: GHC.Prim.Int# -> [TicTacToeEngine.Field]
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (x :: GHC.Prim.Int#) ->
                              GHC.Types.:
                                @ TicTacToeEngine.Field
                                (case GHC.Prim.indexArray#
                                        @ TicTacToeEngine.Field
                                        ds2
                                        x of ds5 { Unit# ipv ->
                                 ipv })
                                (case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.==# x y) of wild2 {
                                   GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                   GHC.Types.True -> GHC.Types.[] @ TicTacToeEngine.Field })
                          } in
                          case TicTacToePlayer.$wloop (go 0#) 0# of ww { DEFAULT ->
                          GHC.Types.I# ww }
                       GHC.Types.True -> TicTacToePlayer.firstEmptyPlace1 } }
                 } in
                 (# case index of ww { GHC.Types.I# ww1 ->
                    case GHC.Classes.divInt# ww1 3# of ww4 { DEFAULT ->
                    GHC.Types.I# ww4 } },
                    case index of wild1 { GHC.Types.I# x ->
                    case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } } #)) -}
9c2b821575c95fa8a7b270e1abb7a0f8
  $wloop :: [TicTacToeEngine.Field] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0] -}
6dab5e5536aee0050969af4f1ad01726
  firstEmptyPlace ::
    TicTacToeEngine.Board -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,1*U(A,A,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TicTacToeEngine.Board) ->
                 case TicTacToePlayer.$wfirstEmptyPlace w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7c3080ecdc5f131be0d09e208e129169
  firstEmptyPlace1 :: GHC.Types.Int
  {- Unfolding: (case TicTacToePlayer.$wloop
                        (GHC.Types.[] @ TicTacToeEngine.Field)
                        0# of v { DEFAULT ->
                 GHC.Types.I# v }) -}
137be80db8606234a87211ae7867018f
  lazilyDecideHowToMove ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 2,
     Strictness: <S,1*U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: TicTacToeEngine.Field) (board :: TicTacToeEngine.Board) ->
                 TicTacToeEngine.makeAMove
                   board
                   f
                   (TicTacToePlayer.firstEmptyPlace board)) -}
a4a080d4afb1865031b0cbb1f857127c
  oneDimIndexToTwoDim ::
    GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 (case w of ww { GHC.Types.I# ww1 ->
                  case GHC.Classes.divInt# ww1 3# of ww4 { DEFAULT ->
                  GHC.Types.I# ww4 } },
                  case w of wild1 { GHC.Types.I# x ->
                  case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                  GHC.Types.I# ww2 } })) -}
53a21378d97af1dc4e86d494de9fbd57
  otherPlayersField :: TicTacToeEngine.Field -> TicTacToeEngine.Field
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TicTacToeEngine.Field) ->
                 case ds of wild {
                   TicTacToeEngine.Empty -> TicTacToeEngine.Empty
                   TicTacToeEngine.Cross -> TicTacToeEngine.Circle
                   TicTacToeEngine.Circle -> TicTacToeEngine.Cross }) -}
1de09be89d7ce89454d80876531e9214
  sensiblyDecideHowToMove ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 2,
     Strictness: <S,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

