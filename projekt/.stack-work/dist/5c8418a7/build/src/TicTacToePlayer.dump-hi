
==================== FINAL INTERFACE ====================
2018-01-26 17:51:37.745754 UTC

interface projekt-0.1.0.0-TBLQXoa90l5P6smpEMzVF:TicTacToePlayer 8022
  interface hash: c5e5722850c016e77775f74b7e888846
  ABI hash: 5dad19cd078c8f296953991a938df175
  export-list hash: 7bba1c8eae892ff93ea8fdc333027025
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 73bbfb07a2cc198332f47c5c19438df4
  sig of: Nothing
  used TH splices: False
  where
exports:
  TicTacToePlayer.firstEmptyPlace
  TicTacToePlayer.lazilyDecideHowToMove
  TicTacToePlayer.oneDimIndexToTwoDim
  TicTacToePlayer.otherPlayersField
  TicTacToePlayer.sensiblyDecideHowToMove
module dependencies: TicTacToeEngine
package dependencies: array-0.5.2.0* base-4.10.1.0*
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  array-0.5.2.0:Data.Array 869b69aac66df5e34601dac3d3170393
import  -/  base-4.10.1.0:Data.Maybe f51a1c24c4c11dca22ee9c2ea0071a10
import  -/  base-4.10.1.0:GHC.Arr 80cd02c1e00d7b9b0ac8f460e89b2871
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  TicTacToeEngine 7e384c135b8536b6e1c100e6357fcedc
  exports: 4736fcbd7704db449493bcf4c159ceb6
  Board d416d5ac98acdf9badbc27153b5b0462
  Circle e04966811c3f26a8d9ae7716f5f3131f
  Cross cca4d2efcdf0e8a9fd4e7cb0c14671b4
  Empty 6eca51d05651f08e0f6415fbb770a171
  Field 4694a87e8e72d4dce31bd51757727392
  InProgress 1d2d12ef454e6ebb44a930ba65933772
  makeAMove 6110d9c4371e058444d08ef9b37ce836
  seeGameStatus 5167423478462095b9c24146fddee054
387e7e90ff9312df01655ae2d4471ef8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TicTacToePlayer.$trModule3
                   TicTacToePlayer.$trModule1) -}
6df0c4090d4d8d9179992d1a4c98ad39
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToePlayer.$trModule2) -}
70a41dcdddff296acbeee620b98c308b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TicTacToePlayer"#) -}
0bbdef511d8227eb34df5d5060285ae3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToePlayer.$trModule4) -}
e58598eee54baf27ae111a782969ae43
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("projekt-0.1.0.0-TBLQXoa90l5P6smpEMzVF"#) -}
c24177b31d5fa8e47fa0a507138296b3
  $wfirstEmptyPlace ::
    TicTacToeEngine.Board -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,1*U(A,A,U,U)>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.Board) ->
                 let {
                   index :: GHC.Types.Int
                   = case w of wild { GHC.Arr.Array ds ds1 dt ds2 ->
                     let {
                       y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># 0# y) of wild1 {
                       GHC.Types.False
                       -> letrec {
                            go :: GHC.Prim.Int# -> [TicTacToeEngine.Field]
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ (x :: GHC.Prim.Int#) ->
                              GHC.Types.:
                                @ TicTacToeEngine.Field
                                (case GHC.Prim.indexArray#
                                        @ TicTacToeEngine.Field
                                        ds2
                                        x of ds5 { Unit# ipv ->
                                 ipv })
                                (case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.==# x y) of wild2 {
                                   GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                   GHC.Types.True -> GHC.Types.[] @ TicTacToeEngine.Field })
                          } in
                          case TicTacToePlayer.$wloop (go 0#) 0# of ww { DEFAULT ->
                          GHC.Types.I# ww }
                       GHC.Types.True -> TicTacToePlayer.firstEmptyPlace1 } }
                 } in
                 (# case index of ww { GHC.Types.I# ww1 ->
                    case GHC.Classes.divInt# ww1 3# of ww4 { DEFAULT ->
                    GHC.Types.I# ww4 } },
                    case index of wild1 { GHC.Types.I# x ->
                    case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } } #)) -}
599164274582ebf53d69b3dfa5431ec0
  $wloop :: [TicTacToeEngine.Field] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0] -}
09c82eda7cb0ac924303457e2efaecaa
  firstEmptyPlace ::
    TicTacToeEngine.Board -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,1*U(A,A,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TicTacToeEngine.Board) ->
                 case TicTacToePlayer.$wfirstEmptyPlace w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
ce63414ee034562b7a955cfe8b88ffe0
  firstEmptyPlace1 :: GHC.Types.Int
  {- Unfolding: (case TicTacToePlayer.$wloop
                        (GHC.Types.[] @ TicTacToeEngine.Field)
                        0# of v { DEFAULT ->
                 GHC.Types.I# v }) -}
cbadbb40048f4a73cfeb95ecc54f2771
  lazilyDecideHowToMove ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 2,
     Strictness: <S,1*U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: TicTacToeEngine.Field) (board :: TicTacToeEngine.Board) ->
                 TicTacToeEngine.makeAMove
                   board
                   f
                   (TicTacToePlayer.firstEmptyPlace board)) -}
e446df42bf9af005c3e603f566de6fa3
  oneDimIndexToTwoDim ::
    GHC.Types.Int -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 (case w of ww { GHC.Types.I# ww1 ->
                  case GHC.Classes.divInt# ww1 3# of ww4 { DEFAULT ->
                  GHC.Types.I# ww4 } },
                  case w of wild1 { GHC.Types.I# x ->
                  case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                  GHC.Types.I# ww2 } })) -}
c89486699bab4a0ce5cf382b23866437
  otherPlayersField :: TicTacToeEngine.Field -> TicTacToeEngine.Field
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TicTacToeEngine.Field) ->
                 case ds of wild {
                   TicTacToeEngine.Empty -> TicTacToeEngine.Empty
                   TicTacToeEngine.Cross -> TicTacToeEngine.Circle
                   TicTacToeEngine.Circle -> TicTacToeEngine.Cross }) -}
612b0668e0094f7a94536e813d0e4671
  sensiblyDecideHowToMove ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 2,
     Strictness: <S,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

