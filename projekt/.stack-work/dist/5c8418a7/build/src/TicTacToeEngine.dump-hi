
==================== FINAL INTERFACE ====================
2018-01-26 10:28:53.2519819 UTC

interface projekt-0.1.0.0-L2R9sX9EbLN31CCNRW6qUq:TicTacToeEngine 8022
  interface hash: aff3098aba3b55405786c5863b7ba31a
  ABI hash: 909995f5ec0e675aac39c47c1257f0ab
  export-list hash: 4037410c300a2034b44b1bf9e446b1c0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 73bbfb07a2cc198332f47c5c19438df4
  sig of: Nothing
  used TH splices: False
  where
exports:
  TicTacToeEngine.makeAMove
  TicTacToeEngine.newBoard
  TicTacToeEngine.seeGameStatus
  TicTacToeEngine.Board
  TicTacToeEngine.Field{TicTacToeEngine.Circle TicTacToeEngine.Cross TicTacToeEngine.Empty}
  TicTacToeEngine.GameStatus{TicTacToeEngine.CircleWon TicTacToeEngine.CrossWon TicTacToeEngine.InProgress TicTacToeEngine.Stalemate}
module dependencies:
package dependencies: array-0.5.2.0* base-4.10.1.0*
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  array-0.5.2.0:Data.Array 869b69aac66df5e34601dac3d3170393
import  -/  base-4.10.1.0:Data.Ix eef5a93ab6d35d296e42d08563b7edc1
import  -/  base-4.10.1.0:GHC.Arr 80cd02c1e00d7b9b0ac8f460e89b2871
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
d4917fad7dd87b3d2ead74ed280a312b
  $fEqField :: GHC.Classes.Eq TicTacToeEngine.Field
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.Field
                  TicTacToeEngine.$fEqField_$c==
                  TicTacToeEngine.$fEqField_$c/= -}
d4917fad7dd87b3d2ead74ed280a312b
  $fEqField_$c/= ::
    TicTacToeEngine.Field -> TicTacToeEngine.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: TicTacToeEngine.Field) (y :: TicTacToeEngine.Field) ->
                 case x of wild {
                   TicTacToeEngine.Empty
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Empty -> GHC.Types.False }
                   TicTacToeEngine.Cross
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Cross -> GHC.Types.False }
                   TicTacToeEngine.Circle
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Circle -> GHC.Types.False } }) -}
d4917fad7dd87b3d2ead74ed280a312b
  $fEqField_$c== ::
    TicTacToeEngine.Field -> TicTacToeEngine.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: TicTacToeEngine.Field) (ds1 :: TicTacToeEngine.Field) ->
                 case ds of wild {
                   TicTacToeEngine.Empty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Empty -> GHC.Types.True }
                   TicTacToeEngine.Cross
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Cross -> GHC.Types.True }
                   TicTacToeEngine.Circle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Circle -> GHC.Types.True } }) -}
fb05f3568dcbc66b438667b3e8328d01
  $fEqGameStatus :: GHC.Classes.Eq TicTacToeEngine.GameStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.GameStatus
                  TicTacToeEngine.$fEqGameStatus_$c==
                  TicTacToeEngine.$fEqGameStatus_$c/= -}
fb05f3568dcbc66b438667b3e8328d01
  $fEqGameStatus_$c/= ::
    TicTacToeEngine.GameStatus
    -> TicTacToeEngine.GameStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: TicTacToeEngine.GameStatus)
                   (y :: TicTacToeEngine.GameStatus) ->
                 case x of wild {
                   TicTacToeEngine.InProgress
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.InProgress -> GHC.Types.False }
                   TicTacToeEngine.CrossWon
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.CrossWon -> GHC.Types.False }
                   TicTacToeEngine.CircleWon
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.CircleWon -> GHC.Types.False }
                   TicTacToeEngine.Stalemate
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Stalemate -> GHC.Types.False } }) -}
fb05f3568dcbc66b438667b3e8328d01
  $fEqGameStatus_$c== ::
    TicTacToeEngine.GameStatus
    -> TicTacToeEngine.GameStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: TicTacToeEngine.GameStatus)
                   (ds1 :: TicTacToeEngine.GameStatus) ->
                 case ds of wild {
                   TicTacToeEngine.InProgress
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.InProgress -> GHC.Types.True }
                   TicTacToeEngine.CrossWon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.CrossWon -> GHC.Types.True }
                   TicTacToeEngine.CircleWon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.CircleWon -> GHC.Types.True }
                   TicTacToeEngine.Stalemate
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Stalemate -> GHC.Types.True } }) -}
d4917fad7dd87b3d2ead74ed280a312b
  $fShowField :: GHC.Show.Show TicTacToeEngine.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.Field
                  TicTacToeEngine.$fShowField_$cshowsPrec
                  TicTacToeEngine.$fShowField_$cshow
                  TicTacToeEngine.$fShowField_$cshowList -}
800aa37dcb93b2d3b84a76deb0be1118
  $fShowField1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField2) -}
3163b521be67275b260779ec1f3d94c0
  $fShowField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Circle"#) -}
982a535323b41617fc784c2c2afd9bdb
  $fShowField3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField4) -}
75d7cc79199a34d4aab4e4b7e2415545
  $fShowField4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cross"#) -}
bc9504c00c1bfd92a3f3b26d6bfe5f96
  $fShowField5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField6) -}
bd653591ff0cfe6f1f5198d8240ecc46
  $fShowField6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty"#) -}
d4917fad7dd87b3d2ead74ed280a312b
  $fShowField_$cshow :: TicTacToeEngine.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToeEngine.Field) ->
                 case x of wild {
                   TicTacToeEngine.Empty -> TicTacToeEngine.$fShowField5
                   TicTacToeEngine.Cross -> TicTacToeEngine.$fShowField3
                   TicTacToeEngine.Circle -> TicTacToeEngine.$fShowField1 }) -}
d4917fad7dd87b3d2ead74ed280a312b
  $fShowField_$cshowList :: [TicTacToeEngine.Field] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToeEngine.Field
                   TicTacToeEngine.$w$cshowsPrec) -}
d4917fad7dd87b3d2ead74ed280a312b
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> TicTacToeEngine.Field -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToeEngine.Field)
                   (w2 :: GHC.Base.String) ->
                 TicTacToeEngine.$w$cshowsPrec w1 w2) -}
fb05f3568dcbc66b438667b3e8328d01
  $fShowGameStatus :: GHC.Show.Show TicTacToeEngine.GameStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.GameStatus
                  TicTacToeEngine.$fShowGameStatus_$cshowsPrec
                  TicTacToeEngine.$fShowGameStatus_$cshow
                  TicTacToeEngine.$fShowGameStatus_$cshowList -}
7a586b2776e2db6b2a171e55bcb8dd23
  $fShowGameStatus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus2) -}
4118d1db6c7bfe3f75e038f85c6342d7
  $fShowGameStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Stalemate"#) -}
15fa2fd3dc455127d4f13afd1b6d6946
  $fShowGameStatus3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus4) -}
a5cf29dc5c8c47c644edf9bb32bddf5e
  $fShowGameStatus4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CircleWon"#) -}
b852edc6aba31528343ca972aae74f5c
  $fShowGameStatus5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus6) -}
e97f701dedb5ce800ccddb3e9ea7073c
  $fShowGameStatus6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CrossWon"#) -}
c2966a79f9ab8ae706ccd1d0e9b3245f
  $fShowGameStatus7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus8) -}
eccb32b1b681424d313646ad04bcb1e3
  $fShowGameStatus8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InProgress"#) -}
fb05f3568dcbc66b438667b3e8328d01
  $fShowGameStatus_$cshow ::
    TicTacToeEngine.GameStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToeEngine.GameStatus) ->
                 case x of wild {
                   TicTacToeEngine.InProgress -> TicTacToeEngine.$fShowGameStatus7
                   TicTacToeEngine.CrossWon -> TicTacToeEngine.$fShowGameStatus5
                   TicTacToeEngine.CircleWon -> TicTacToeEngine.$fShowGameStatus3
                   TicTacToeEngine.Stalemate
                   -> TicTacToeEngine.$fShowGameStatus1 }) -}
fb05f3568dcbc66b438667b3e8328d01
  $fShowGameStatus_$cshowList ::
    [TicTacToeEngine.GameStatus] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToeEngine.GameStatus
                   TicTacToeEngine.$w$cshowsPrec1) -}
fb05f3568dcbc66b438667b3e8328d01
  $fShowGameStatus_$cshowsPrec ::
    GHC.Types.Int -> TicTacToeEngine.GameStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToeEngine.GameStatus)
                   (w2 :: GHC.Base.String) ->
                 TicTacToeEngine.$w$cshowsPrec1 w1 w2) -}
b1e3cce6f42eab5fa3a64a82a5488e2b
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2030298560490381961##
                   14613550167411928512##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Circle2
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
bf101b13d88ad16e1ba067f3e16a90bb
  $tc'Circle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
1c93f25646ec9ad78a47b6aad8cecada
  $tc'Circle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Circle3) -}
5a5f1dfff516d43f21273a7d5ebc2598
  $tc'Circle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Circle"#) -}
98bf928ec53198347b41769450d2f055
  $tc'CircleWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2020403128833014922##
                   9391475231287242604##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'CircleWon2
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
4dc7825770084dc1c31239d0e44cb4c7
  $tc'CircleWon1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
49c46048101876af94f60ddb8d6629ed
  $tc'CircleWon2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'CircleWon3) -}
80209671cc4fd6e2d07204d698e998fd
  $tc'CircleWon3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CircleWon"#) -}
fcd9dcd317d310a04aeca5c4b3beb799
  $tc'Cross :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17556708327405002911##
                   7436078220018426327##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Cross1
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
f6eb7b76fd848009e41f7a6815cde523
  $tc'Cross1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Cross2) -}
afc4a4d4df1a6423b63bd2dfdb328c2f
  $tc'Cross2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cross"#) -}
c64f809031484acaa7642a35865e2dd9
  $tc'CrossWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11179149360642911539##
                   695399038103712811##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'CrossWon1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
2268854494d417e0beb468d5ae70f01a
  $tc'CrossWon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'CrossWon2) -}
fef91b6ce6974d334463c46c0eecde60
  $tc'CrossWon2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CrossWon"#) -}
08a82d6a0dee3ef34ca83ce0e6cc0157
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10848938748922205907##
                   9634473620349690897##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Empty1
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
9dd65af91550f9ae1a65461d35873b41
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Empty2) -}
2cba7966cb9b016a36b2dff71c5666d8
  $tc'Empty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
6b5677008b2fb82770690b4c34b7673f
  $tc'InProgress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15826619574942715222##
                   8817000256184014910##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'InProgress1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
06d815d89d11faf19a59b3a4542f23ae
  $tc'InProgress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'InProgress2) -}
6471a1c659ac1684e96bfef34f9fac13
  $tc'InProgress2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InProgress"#) -}
62394503c0764ef0d5b3e72c35728a4f
  $tc'Stalemate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1703384990831951662##
                   16313592712249579864##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Stalemate1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
d4e42ef039122a056df03ec16d18b4b8
  $tc'Stalemate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Stalemate2) -}
4ba2f86135758d1b1652daf57f1091eb
  $tc'Stalemate2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Stalemate"#) -}
4718223fce411b830a230edaed857c20
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6010296857870610220##
                   8068949785148214755##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tcField1
                   0#
                   GHC.Types.krep$*) -}
c24be1feffe9d93cbdc3f3b97b714afa
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tcField2) -}
5b5c4a2dbf1d6d9cc99004445eb2367b
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
47870dbf6397ee08168464bb810e0424
  $tcGameStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18051651141356666630##
                   8060802718119161079##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tcGameStatus1
                   0#
                   GHC.Types.krep$*) -}
58c2b5f74f6ee04c70a61d29977481ec
  $tcGameStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tcGameStatus2) -}
999cfde2e258ea83f53c8872f396f159
  $tcGameStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameStatus"#) -}
46cb4b438d4d57a9fee4050cfd6f4237
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TicTacToeEngine.$trModule3
                   TicTacToeEngine.$trModule1) -}
5688206cdd12191522774f08579a2c24
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$trModule2) -}
f70f252036a066659a52d23fa4c74f26
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TicTacToeEngine"#) -}
3343b5528961daecd887b0922458d054
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$trModule4) -}
734bc1531e666301139575e3ee8b550d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("projekt-0.1.0.0-L2R9sX9EbLN31CCNRW6qUq"#) -}
d4917fad7dd87b3d2ead74ed280a312b
  $w$cshowsPrec ::
    TicTacToeEngine.Field -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.Field)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToeEngine.Empty
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToeEngine.$fShowField5 w1
                   TicTacToeEngine.Cross
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToeEngine.$fShowField3 w1
                   TicTacToeEngine.Circle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowField1
                        w1 }) -}
fb05f3568dcbc66b438667b3e8328d01
  $w$cshowsPrec1 ::
    TicTacToeEngine.GameStatus -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.GameStatus)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToeEngine.InProgress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus7
                        w1
                   TicTacToeEngine.CrossWon
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus5
                        w1
                   TicTacToeEngine.CircleWon
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus3
                        w1
                   TicTacToeEngine.Stalemate
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus1
                        w1 }) -}
cad373f9def0323a611c9d693ae945ed
  $wgo ::
    GHC.Prim.Int#
    -> (# [(GHC.Types.Int, GHC.Types.Int)],
          [[(GHC.Types.Int, GHC.Types.Int)]] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
93111d2ee7bc045aafa1bd24a859aec0
  $wgo1 ::
    GHC.Prim.Int#
    -> (# [(GHC.Types.Int, GHC.Types.Int)],
          [[(GHC.Types.Int, GHC.Types.Int)]] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
cdc9ca8fe3ce0d0e3d76e1f010a45a4e
  type Board =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field
d4917fad7dd87b3d2ead74ed280a312b
  data Field = Empty | Cross | Circle
fb05f3568dcbc66b438667b3e8328d01
  data GameStatus = InProgress | CrossWon | CircleWon | Stalemate
2482d6eced4428c06f8ecc51002d2ae4
  makeAMove ::
    TicTacToeEngine.Board
    -> TicTacToeEngine.Field
    -> (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 3,
     Strictness: <L,1*U(U(U(U),U(U)),U(U(U),U(U)),U,U)><S,1*U><L,1*U(1*U(U),1*U(U))>,
     Unfolding: (\ (ds :: TicTacToeEngine.Board)
                   (ds1 :: TicTacToeEngine.Field)
                   (ds2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds1 of wild {
                   DEFAULT
                   -> case ds2 of wild1 { (,) i j ->
                      case i of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild3 {
                        GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                        GHC.Types.True
                        -> case j of wild4 { GHC.Types.I# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 0#) of wild5 {
                             GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# x 2#) of wild6 {
                                  GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 2#) of wild7 {
                                       GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                                       GHC.Types.True
                                       -> case ds of wild8 { GHC.Arr.Array l u dt ds3 ->
                                          case l of wild9 { (,) l1 l2 ->
                                          case u of wild10 { (,) u1 u2 ->
                                          case l1 of wild11 { GHC.Types.I# m ->
                                          case u1 of wild12 { GHC.Types.I# n ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# m x) of wild13 {
                                            GHC.Types.False
                                            -> case GHC.Arr.hopelessIndexError
                                               ret_ty (GHC.Base.Maybe TicTacToeEngine.Board)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<=# x n) of wild14 {
                                                 GHC.Types.False
                                                 -> case GHC.Arr.hopelessIndexError
                                                    ret_ty (GHC.Base.Maybe TicTacToeEngine.Board)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case l2 of wild15 { GHC.Types.I# m1 ->
                                                    case u2 of wild16 { GHC.Types.I# n1 ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<=# m1 x1) of wild17 {
                                                      GHC.Types.False
                                                      -> case GHC.Arr.hopelessIndexError
                                                         ret_ty (GHC.Base.Maybe
                                                                   TicTacToeEngine.Board)
                                                         of {}
                                                      GHC.Types.True
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.<=# x1 n1) of wild18 {
                                                           GHC.Types.False
                                                           -> case GHC.Arr.hopelessIndexError
                                                              ret_ty (GHC.Base.Maybe
                                                                        TicTacToeEngine.Board)
                                                              of {}
                                                           GHC.Types.True
                                                           -> case GHC.Prim.indexArray#
                                                                     @ TicTacToeEngine.Field
                                                                     ds3
                                                                     (GHC.Prim.+#
                                                                        (GHC.Prim.*#
                                                                           (GHC.Prim.-# x m)
                                                                           (GHC.Prim.+#
                                                                              (GHC.Prim.-# n1 m1)
                                                                              1#))
                                                                        (GHC.Prim.-#
                                                                           x1
                                                                           m1)) of ds4 { Unit# ipv ->
                                                              case ipv of wild19 {
                                                                TicTacToeEngine.Empty
                                                                -> GHC.Base.Just
                                                                     @ (GHC.Arr.Array
                                                                          (GHC.Types.Int,
                                                                           GHC.Types.Int)
                                                                          TicTacToeEngine.Field)
                                                                     (case GHC.Magic.runRW#
                                                                             @ ('GHC.Types.TupleRep
                                                                                  '['GHC.Types.TupleRep
                                                                                      '[],
                                                                                    'GHC.Types.LiftedRep])
                                                                             @ (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Arr.Array
                                                                                    (GHC.Types.Int,
                                                                                     GHC.Types.Int)
                                                                                    TicTacToeEngine.Field #)
                                                                             (\ (s1 :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                                              case GHC.Prim.newArray#
                                                                                     @ TicTacToeEngine.Field
                                                                                     @ GHC.Prim.RealWorld
                                                                                     dt
                                                                                     (GHC.Arr.arrEleBottom
                                                                                        @ TicTacToeEngine.Field)
                                                                                     s1 of ds5 { (#,#) ipv1 ipv2 ->
                                                                              letrec {
                                                                                copy :: GHC.Prim.Int#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Arr.Array
                                                                                                (GHC.Types.Int,
                                                                                                 GHC.Types.Int)
                                                                                                TicTacToeEngine.Field #)
                                                                                  <join 2> {- Arity: 2,
                                                                                              Strictness: <S,U><S,U> -}
                                                                                = \ (i# :: GHC.Prim.Int#)
                                                                                    (s3# :: GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld) ->
                                                                                  case GHC.Prim.tagToEnum#
                                                                                         @ GHC.Types.Bool
                                                                                         (GHC.Prim.==#
                                                                                            i#
                                                                                            dt) of wild20 {
                                                                                    GHC.Types.False
                                                                                    -> case GHC.Prim.indexArray#
                                                                                              @ TicTacToeEngine.Field
                                                                                              ds3
                                                                                              i# of ds6 { Unit# ipv3 ->
                                                                                       case GHC.Prim.writeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              i#
                                                                                              ipv3
                                                                                              s3# of s4# { DEFAULT ->
                                                                                       copy
                                                                                         (GHC.Prim.+#
                                                                                            i#
                                                                                            1#)
                                                                                         s4# } }
                                                                                    GHC.Types.True
                                                                                    -> case GHC.Prim.writeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              (GHC.Prim.+#
                                                                                                 (GHC.Prim.*#
                                                                                                    (GHC.Prim.-#
                                                                                                       x
                                                                                                       m)
                                                                                                    (GHC.Prim.+#
                                                                                                       (GHC.Prim.-#
                                                                                                          n1
                                                                                                          m1)
                                                                                                       1#))
                                                                                                 (GHC.Prim.-#
                                                                                                    x1
                                                                                                    m1))
                                                                                              wild
                                                                                              s3# of s2# { DEFAULT ->
                                                                                       case GHC.Prim.unsafeFreezeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              s2# of ds6 { (#,#) ipv3 ipv4 ->
                                                                                       (# ipv3,
                                                                                          GHC.Arr.Array
                                                                                            @ (GHC.Types.Int,
                                                                                               GHC.Types.Int)
                                                                                            @ TicTacToeEngine.Field
                                                                                            wild9
                                                                                            wild10
                                                                                            dt
                                                                                            ipv4 #) } } }
                                                                              } in
                                                                              copy
                                                                                0#
                                                                                ipv1 }) of ds5 { (#,#) ipv1 ipv2 ->
                                                                      ipv2 })
                                                                TicTacToeEngine.Cross
                                                                -> GHC.Base.Nothing
                                                                     @ TicTacToeEngine.Board
                                                                TicTacToeEngine.Circle
                                                                -> GHC.Base.Nothing
                                                                     @ TicTacToeEngine.Board } } } } } } } } } } } } } } } } } } } }
                   TicTacToeEngine.Empty
                   -> GHC.Base.Nothing @ TicTacToeEngine.Board }) -}
afb260cff6bef405b7acb4bd7e548a11
  newBoard :: TicTacToeEngine.Board
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             GHC.Arr.Array
                               (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field #)
                        TicTacToeEngine.newBoard1 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
691447a6fde455f3fd77aacad26fa84a
  newBoard1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Arr.Array
            (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ TicTacToeEngine.Field
                        @ GHC.Prim.RealWorld
                        9#
                        (GHC.Arr.arrEleBottom @ TicTacToeEngine.Field)
                        s1# of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        0#
                        TicTacToeEngine.Empty
                        ipv of s4# { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        1#
                        TicTacToeEngine.Empty
                        s4# of s4#1 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        2#
                        TicTacToeEngine.Empty
                        s4#1 of s4#2 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        3#
                        TicTacToeEngine.Empty
                        s4#2 of s4#3 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        4#
                        TicTacToeEngine.Empty
                        s4#3 of s4#4 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        5#
                        TicTacToeEngine.Empty
                        s4#4 of s4#5 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        6#
                        TicTacToeEngine.Empty
                        s4#5 of s4#6 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        7#
                        TicTacToeEngine.Empty
                        s4#6 of s4#7 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        8#
                        TicTacToeEngine.Empty
                        s4#7 of wild4 { DEFAULT ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        wild4 of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Arr.Array
                      @ (GHC.Types.Int, GHC.Types.Int)
                      @ TicTacToeEngine.Field
                      TicTacToeEngine.newBoard_l
                      TicTacToeEngine.newBoard_u
                      9#
                      ipv3 #) } } } } } } } } } } }) -}
e1053b303b396fc88d7e6f51e08411c1
  newBoard2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
68abee2cbcbf85b8f058968d7a0eba13
  newBoard3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
44509bacfbe4e0f5e4b3ed9d876ef384
  newBoard_l :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard3,
                  TicTacToeEngine.newBoard3)) -}
881bdacbd17c47d7f1c9b4ad440078d8
  newBoard_u :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard2,
                  TicTacToeEngine.newBoard2)) -}
cb51075f31a12f8e4fd07d29a8e65288
  seeGameStatus ::
    TicTacToeEngine.Board -> TicTacToeEngine.GameStatus
  {- Arity: 1, Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)>,
     Unfolding: (\ (board :: TicTacToeEngine.Board) ->
                 case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                        TicTacToeEngine.Cross
                        board
                        TicTacToeEngine.seeGameStatus15 of wild {
                   GHC.Types.False
                   -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                             TicTacToeEngine.Cross
                             board
                             TicTacToeEngine.seeGameStatus14 of wild1 {
                        GHC.Types.False
                        -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                  TicTacToeEngine.Cross
                                  board
                                  TicTacToeEngine.seeGameStatus2 of wild2 {
                             GHC.Types.False
                             -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                       TicTacToeEngine.Circle
                                       board
                                       TicTacToeEngine.seeGameStatus15 of wild3 {
                                  GHC.Types.False
                                  -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                            TicTacToeEngine.Circle
                                            board
                                            TicTacToeEngine.seeGameStatus14 of wild4 {
                                       GHC.Types.False
                                       -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                                 TicTacToeEngine.Circle
                                                 board
                                                 TicTacToeEngine.seeGameStatus2 of wild5 {
                                            GHC.Types.False
                                            -> case board of wild6 { GHC.Arr.Array ds ds1 dt ds2 ->
                                               let {
                                                 y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.># 0# y) of wild7 {
                                                 GHC.Types.False
                                                 -> letrec {
                                                      go :: GHC.Prim.Int# -> [TicTacToeEngine.Field]
                                                        {- Arity: 1, Strictness: <L,U> -}
                                                      = \ (x :: GHC.Prim.Int#) ->
                                                        GHC.Types.:
                                                          @ TicTacToeEngine.Field
                                                          (case GHC.Prim.indexArray#
                                                                  @ TicTacToeEngine.Field
                                                                  ds2
                                                                  x of ds5 { Unit# ipv ->
                                                           ipv })
                                                          (case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.==# x y) of wild8 {
                                                             GHC.Types.False
                                                             -> go (GHC.Prim.+# x 1#)
                                                             GHC.Types.True
                                                             -> GHC.Types.[]
                                                                  @ TicTacToeEngine.Field })
                                                    } in
                                                    case TicTacToeEngine.seeGameStatus_allFilledOnList
                                                           (go 0#) of wild8 {
                                                      GHC.Types.False -> TicTacToeEngine.InProgress
                                                      GHC.Types.True -> TicTacToeEngine.Stalemate }
                                                 GHC.Types.True
                                                 -> case TicTacToeEngine.seeGameStatus1 of wild8 {
                                                      GHC.Types.False -> TicTacToeEngine.InProgress
                                                      GHC.Types.True
                                                      -> TicTacToeEngine.Stalemate } } }
                                            GHC.Types.True -> TicTacToeEngine.CircleWon }
                                       GHC.Types.True -> TicTacToeEngine.CircleWon }
                                  GHC.Types.True -> TicTacToeEngine.CircleWon }
                             GHC.Types.True -> TicTacToeEngine.CrossWon }
                        GHC.Types.True -> TicTacToeEngine.CrossWon }
                   GHC.Types.True -> TicTacToeEngine.CrossWon }) -}
b387db61edc2459eb83d808269fbc75f
  seeGameStatus1 :: GHC.Types.Bool
  {- Unfolding: (TicTacToeEngine.seeGameStatus_allFilledOnList
                   (GHC.Types.[] @ TicTacToeEngine.Field)) -}
1ae5a74e5eec305ef70b8dfff525286d
  seeGameStatus10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard3,
                  TicTacToeEngine.newBoard2)) -}
65e19b3597d27ac1576ac59ce5fd1db4
  seeGameStatus11 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.newBoard_l
                   TicTacToeEngine.seeGameStatus12) -}
39f319e9de5066755b238cc5a143c9f7
  seeGameStatus12 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus8
                   TicTacToeEngine.seeGameStatus13) -}
d5addeb5b4dd341364e87dd8266ac8a2
  seeGameStatus13 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.newBoard_u
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
37665019b05914f677a19004b31f6c0b
  seeGameStatus14 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (case TicTacToeEngine.$wgo
                        0# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [(GHC.Types.Int, GHC.Types.Int)] ww1 ww2 }) -}
a30ce37749b12cb1b602f57a11ade2b3
  seeGameStatus15 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (case TicTacToeEngine.$wgo1
                        0# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [(GHC.Types.Int, GHC.Types.Int)] ww1 ww2 }) -}
b8c998d938d2ebc716c28d0bd4df0f6f
  seeGameStatus2 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   TicTacToeEngine.seeGameStatus11
                   TicTacToeEngine.seeGameStatus3) -}
71e4c74c8a493635f28440681cf72711
  seeGameStatus3 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   TicTacToeEngine.seeGameStatus4
                   (GHC.Types.[] @ [(GHC.Types.Int, GHC.Types.Int)])) -}
c5a2bba8e601db574f796dfdbd42048d
  seeGameStatus4 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus10
                   TicTacToeEngine.seeGameStatus5) -}
2bbf448e58035901e881f132ad78a65a
  seeGameStatus5 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus8
                   TicTacToeEngine.seeGameStatus6) -}
e4d3401a643f33d324322b40fefe6df4
  seeGameStatus6 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus7
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
f24466b8e55aa2fc2829838b44c295a4
  seeGameStatus7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard2,
                  TicTacToeEngine.newBoard3)) -}
ea52ebaf8be03637ff93434397455969
  seeGameStatus8 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.seeGameStatus9,
                  TicTacToeEngine.seeGameStatus9)) -}
6f0c8fddeb51cce05497ff4d6ca2b6a0
  seeGameStatus9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
239ca6e58e477fb72d7298e741935653
  seeGameStatus_allFilledOnList ::
    [TicTacToeEngine.Field] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e4ed67e1eb96cef83a39b5dd9849f67b
  seeGameStatus_checkIfAnyEqual ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board
    -> [[(GHC.Types.Int, GHC.Types.Int)]]
    -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U><L,U(U(U(U),U(U)),U(U(U),U(U)),A,U)><S,1*U> -}
instance [safe] GHC.Classes.Eq [TicTacToeEngine.Field]
  = TicTacToeEngine.$fEqField
instance [safe] GHC.Classes.Eq [TicTacToeEngine.GameStatus]
  = TicTacToeEngine.$fEqGameStatus
instance [safe] GHC.Show.Show [TicTacToeEngine.Field]
  = TicTacToeEngine.$fShowField
instance [safe] GHC.Show.Show [TicTacToeEngine.GameStatus]
  = TicTacToeEngine.$fShowGameStatus
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

