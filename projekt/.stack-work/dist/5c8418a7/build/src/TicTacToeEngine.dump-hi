
==================== FINAL INTERFACE ====================
2018-01-26 17:51:37.1410958 UTC

interface projekt-0.1.0.0-TBLQXoa90l5P6smpEMzVF:TicTacToeEngine 8022
  interface hash: 6ed0b0cafcc7e2a629e0b861d4f04576
  ABI hash: 7e384c135b8536b6e1c100e6357fcedc
  export-list hash: 4736fcbd7704db449493bcf4c159ceb6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 73bbfb07a2cc198332f47c5c19438df4
  sig of: Nothing
  used TH splices: False
  where
exports:
  TicTacToeEngine.makeAMove
  TicTacToeEngine.newBoard
  TicTacToeEngine.seeGameStatus
  TicTacToeEngine.Board
  TicTacToeEngine.Field{TicTacToeEngine.Circle TicTacToeEngine.Cross TicTacToeEngine.Empty}
  TicTacToeEngine.GameStatus{TicTacToeEngine.CircleWon TicTacToeEngine.CrossWon TicTacToeEngine.InProgress TicTacToeEngine.Stalemate}
module dependencies:
package dependencies: array-0.5.2.0* base-4.10.1.0*
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  array-0.5.2.0:Data.Array 869b69aac66df5e34601dac3d3170393
import  -/  base-4.10.1.0:Data.Ix eef5a93ab6d35d296e42d08563b7edc1
import  -/  base-4.10.1.0:GHC.Arr 80cd02c1e00d7b9b0ac8f460e89b2871
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
4694a87e8e72d4dce31bd51757727392
  $fEqField :: GHC.Classes.Eq TicTacToeEngine.Field
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.Field
                  TicTacToeEngine.$fEqField_$c==
                  TicTacToeEngine.$fEqField_$c/= -}
4694a87e8e72d4dce31bd51757727392
  $fEqField_$c/= ::
    TicTacToeEngine.Field -> TicTacToeEngine.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: TicTacToeEngine.Field) (y :: TicTacToeEngine.Field) ->
                 case x of wild {
                   TicTacToeEngine.Empty
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Empty -> GHC.Types.False }
                   TicTacToeEngine.Cross
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Cross -> GHC.Types.False }
                   TicTacToeEngine.Circle
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Circle -> GHC.Types.False } }) -}
4694a87e8e72d4dce31bd51757727392
  $fEqField_$c== ::
    TicTacToeEngine.Field -> TicTacToeEngine.Field -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: TicTacToeEngine.Field) (ds1 :: TicTacToeEngine.Field) ->
                 case ds of wild {
                   TicTacToeEngine.Empty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Empty -> GHC.Types.True }
                   TicTacToeEngine.Cross
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Cross -> GHC.Types.True }
                   TicTacToeEngine.Circle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Circle -> GHC.Types.True } }) -}
d06309fc2949902d0d74db88c4366cd2
  $fEqGameStatus :: GHC.Classes.Eq TicTacToeEngine.GameStatus
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.GameStatus
                  TicTacToeEngine.$fEqGameStatus_$c==
                  TicTacToeEngine.$fEqGameStatus_$c/= -}
d06309fc2949902d0d74db88c4366cd2
  $fEqGameStatus_$c/= ::
    TicTacToeEngine.GameStatus
    -> TicTacToeEngine.GameStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: TicTacToeEngine.GameStatus)
                   (y :: TicTacToeEngine.GameStatus) ->
                 case x of wild {
                   TicTacToeEngine.InProgress
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.InProgress -> GHC.Types.False }
                   TicTacToeEngine.CrossWon
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.CrossWon -> GHC.Types.False }
                   TicTacToeEngine.CircleWon
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.CircleWon -> GHC.Types.False }
                   TicTacToeEngine.Stalemate
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToeEngine.Stalemate -> GHC.Types.False } }) -}
d06309fc2949902d0d74db88c4366cd2
  $fEqGameStatus_$c== ::
    TicTacToeEngine.GameStatus
    -> TicTacToeEngine.GameStatus -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: TicTacToeEngine.GameStatus)
                   (ds1 :: TicTacToeEngine.GameStatus) ->
                 case ds of wild {
                   TicTacToeEngine.InProgress
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.InProgress -> GHC.Types.True }
                   TicTacToeEngine.CrossWon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.CrossWon -> GHC.Types.True }
                   TicTacToeEngine.CircleWon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.CircleWon -> GHC.Types.True }
                   TicTacToeEngine.Stalemate
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToeEngine.Stalemate -> GHC.Types.True } }) -}
4694a87e8e72d4dce31bd51757727392
  $fShowField :: GHC.Show.Show TicTacToeEngine.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.Field
                  TicTacToeEngine.$fShowField_$cshowsPrec
                  TicTacToeEngine.$fShowField_$cshow
                  TicTacToeEngine.$fShowField_$cshowList -}
51f21fd993e091db517a89a5c1930393
  $fShowField1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField2) -}
c53258d7bc8d40ca188658725d6e8e33
  $fShowField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Circle"#) -}
1a11394543a372f2cb2c8ffc1ee3ccd8
  $fShowField3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField4) -}
a6c371e4edc9e490e8dccb7fe88db57a
  $fShowField4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cross"#) -}
7513dc337f8682973760c60bbd825848
  $fShowField5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowField6) -}
1679d5f3ae508fe2f42af6700bb5a9d3
  $fShowField6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty"#) -}
4694a87e8e72d4dce31bd51757727392
  $fShowField_$cshow :: TicTacToeEngine.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToeEngine.Field) ->
                 case x of wild {
                   TicTacToeEngine.Empty -> TicTacToeEngine.$fShowField5
                   TicTacToeEngine.Cross -> TicTacToeEngine.$fShowField3
                   TicTacToeEngine.Circle -> TicTacToeEngine.$fShowField1 }) -}
4694a87e8e72d4dce31bd51757727392
  $fShowField_$cshowList :: [TicTacToeEngine.Field] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToeEngine.Field
                   TicTacToeEngine.$w$cshowsPrec) -}
4694a87e8e72d4dce31bd51757727392
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> TicTacToeEngine.Field -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToeEngine.Field)
                   (w2 :: GHC.Base.String) ->
                 TicTacToeEngine.$w$cshowsPrec w1 w2) -}
d06309fc2949902d0d74db88c4366cd2
  $fShowGameStatus :: GHC.Show.Show TicTacToeEngine.GameStatus
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToeEngine.GameStatus
                  TicTacToeEngine.$fShowGameStatus_$cshowsPrec
                  TicTacToeEngine.$fShowGameStatus_$cshow
                  TicTacToeEngine.$fShowGameStatus_$cshowList -}
f4d7ce6ce6247cb7bfc807e80ba0f796
  $fShowGameStatus1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus2) -}
53c1787893f467d54ecb923726198728
  $fShowGameStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Stalemate"#) -}
884d1979b89d5043b1f5dcc3782b45bd
  $fShowGameStatus3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus4) -}
d0c870bdbc5cbf1bb7c43d2f2714f437
  $fShowGameStatus4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CircleWon"#) -}
a2915724ed2d00dcbfd9fde915a24e5b
  $fShowGameStatus5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus6) -}
5bc33e29fd6924937eb45d70055e6b01
  $fShowGameStatus6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CrossWon"#) -}
c4b0d2bb8342c565050405b471346f5d
  $fShowGameStatus7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   TicTacToeEngine.$fShowGameStatus8) -}
b562e761d3e1f1a25f90d7eeb09ce795
  $fShowGameStatus8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InProgress"#) -}
d06309fc2949902d0d74db88c4366cd2
  $fShowGameStatus_$cshow ::
    TicTacToeEngine.GameStatus -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToeEngine.GameStatus) ->
                 case x of wild {
                   TicTacToeEngine.InProgress -> TicTacToeEngine.$fShowGameStatus7
                   TicTacToeEngine.CrossWon -> TicTacToeEngine.$fShowGameStatus5
                   TicTacToeEngine.CircleWon -> TicTacToeEngine.$fShowGameStatus3
                   TicTacToeEngine.Stalemate
                   -> TicTacToeEngine.$fShowGameStatus1 }) -}
d06309fc2949902d0d74db88c4366cd2
  $fShowGameStatus_$cshowList ::
    [TicTacToeEngine.GameStatus] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToeEngine.GameStatus
                   TicTacToeEngine.$w$cshowsPrec1) -}
d06309fc2949902d0d74db88c4366cd2
  $fShowGameStatus_$cshowsPrec ::
    GHC.Types.Int -> TicTacToeEngine.GameStatus -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToeEngine.GameStatus)
                   (w2 :: GHC.Base.String) ->
                 TicTacToeEngine.$w$cshowsPrec1 w1 w2) -}
9929ead904416c49954a14e4ad0c224d
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   173012767082445564##
                   15538952748962762722##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Circle2
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
6ed2d4337fd6f1e63d854c6abf9f12f9
  $tc'Circle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
a010b03ae1a574c3fe8fb109d0d693ac
  $tc'Circle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Circle3) -}
e0373fece0127f325846d55bde78a97d
  $tc'Circle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Circle"#) -}
acd42a6cfb42f6f7f006a0fc444585a5
  $tc'CircleWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6371367397846478100##
                   10237309613075330993##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'CircleWon2
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
58944f517d8c7c1b9f23067a56b47599
  $tc'CircleWon1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d428a0a7310b2a84862bdc710ed58053
  $tc'CircleWon2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'CircleWon3) -}
263da3991a1ab6120b93fa3c2ca2965f
  $tc'CircleWon3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CircleWon"#) -}
f6db5ef836cdc012c5de8fc11c4eb68c
  $tc'Cross :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10398794214361336799##
                   16795366489286194226##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Cross1
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
990780d85948ed51ee09fa459d64a775
  $tc'Cross1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Cross2) -}
1fd39917c652b3b66f3ab5bbf041cc29
  $tc'Cross2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cross"#) -}
7dcda253047b5430e69df40cfeb5e5df
  $tc'CrossWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13916275554422834806##
                   13787553887047000838##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'CrossWon1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
642a780d7d247563a0b52299556e450d
  $tc'CrossWon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'CrossWon2) -}
05c0e5b2d35127642f7ddba958f1448f
  $tc'CrossWon2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CrossWon"#) -}
064edf6d51e2a7c3998421fbcb082b75
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15585306777556202884##
                   4746410672806982695##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Empty1
                   0#
                   TicTacToeEngine.$tc'Circle1) -}
f33bf603fc5a8ca1380cc63b56cf3a71
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Empty2) -}
ff913b0ecdcd1234cc3701aed783b0f3
  $tc'Empty2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
c2d10b5d77671c35046c3b703d2dbd04
  $tc'InProgress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18292200090040448824##
                   3859466540664639176##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'InProgress1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
dfe9ccf79b16966d3706785ee0fb684e
  $tc'InProgress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'InProgress2) -}
52ba6e98a5eefb469f6863cf51c77160
  $tc'InProgress2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InProgress"#) -}
403cb602cf159cb4a684a080bdb6936f
  $tc'Stalemate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14564172534088658297##
                   4296276293947560809##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tc'Stalemate1
                   0#
                   TicTacToeEngine.$tc'CircleWon1) -}
a5669cea01461ff1d3c2620177c9645b
  $tc'Stalemate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tc'Stalemate2) -}
9bda6a911c5839dfa1108b74050bc576
  $tc'Stalemate2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Stalemate"#) -}
d6453e59f2c043a7c451a2c55b0eb39e
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11036520081081334325##
                   3590842283246176018##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tcField1
                   0#
                   GHC.Types.krep$*) -}
045c5e6b47ae67995303219867add994
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tcField2) -}
4332a51d8874b9e7155dd45bef258f05
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
46529d0249b425337f4ff6b72dba5baf
  $tcGameStatus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2698589469883340278##
                   11656870022146051863##
                   TicTacToeEngine.$trModule
                   TicTacToeEngine.$tcGameStatus1
                   0#
                   GHC.Types.krep$*) -}
12277b0e4a95e51f1003dfab3cb4b340
  $tcGameStatus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$tcGameStatus2) -}
e0b7cec1baded166325efbe38f564bda
  $tcGameStatus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameStatus"#) -}
fa21e5743c0b9252821b2bba400f454d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TicTacToeEngine.$trModule3
                   TicTacToeEngine.$trModule1) -}
ef075ae4a940f5d52a943957a4e64454
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$trModule2) -}
a2a52ee63a8dce1c36dd067a36207783
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TicTacToeEngine"#) -}
270eac3125ba007f14f8e7f309a2fdbc
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS TicTacToeEngine.$trModule4) -}
c16d4528ed4a6772e918a669bfa80344
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("projekt-0.1.0.0-TBLQXoa90l5P6smpEMzVF"#) -}
4694a87e8e72d4dce31bd51757727392
  $w$cshowsPrec ::
    TicTacToeEngine.Field -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.Field)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToeEngine.Empty
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToeEngine.$fShowField5 w1
                   TicTacToeEngine.Cross
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToeEngine.$fShowField3 w1
                   TicTacToeEngine.Circle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowField1
                        w1 }) -}
d06309fc2949902d0d74db88c4366cd2
  $w$cshowsPrec1 ::
    TicTacToeEngine.GameStatus -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToeEngine.GameStatus)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToeEngine.InProgress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus7
                        w1
                   TicTacToeEngine.CrossWon
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus5
                        w1
                   TicTacToeEngine.CircleWon
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus3
                        w1
                   TicTacToeEngine.Stalemate
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        TicTacToeEngine.$fShowGameStatus1
                        w1 }) -}
d55cae3de6634eb04ac59d7620cd3bd2
  $wgo ::
    GHC.Prim.Int#
    -> (# [(GHC.Types.Int, GHC.Types.Int)],
          [[(GHC.Types.Int, GHC.Types.Int)]] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
faf95e71f14750492f8348352be113f6
  $wgo1 ::
    GHC.Prim.Int#
    -> (# [(GHC.Types.Int, GHC.Types.Int)],
          [[(GHC.Types.Int, GHC.Types.Int)]] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
d416d5ac98acdf9badbc27153b5b0462
  type Board =
    GHC.Arr.Array (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field
4694a87e8e72d4dce31bd51757727392
  data Field = Empty | Cross | Circle
d06309fc2949902d0d74db88c4366cd2
  data GameStatus = InProgress | CrossWon | CircleWon | Stalemate
6110d9c4371e058444d08ef9b37ce836
  makeAMove ::
    TicTacToeEngine.Board
    -> TicTacToeEngine.Field
    -> (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe TicTacToeEngine.Board
  {- Arity: 3,
     Strictness: <L,1*U(U(U(U),U(U)),U(U(U),U(U)),U,U)><S,1*U><L,1*U(1*U(U),1*U(U))>,
     Unfolding: (\ (ds :: TicTacToeEngine.Board)
                   (ds1 :: TicTacToeEngine.Field)
                   (ds2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds1 of wild {
                   DEFAULT
                   -> case ds2 of wild1 { (,) i j ->
                      case i of wild2 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 0#) of wild3 {
                        GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                        GHC.Types.True
                        -> case j of wild4 { GHC.Types.I# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 0#) of wild5 {
                             GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# x 2#) of wild6 {
                                  GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# x1 2#) of wild7 {
                                       GHC.Types.False -> GHC.Base.Nothing @ TicTacToeEngine.Board
                                       GHC.Types.True
                                       -> case ds of wild8 { GHC.Arr.Array l u dt ds3 ->
                                          case l of wild9 { (,) l1 l2 ->
                                          case u of wild10 { (,) u1 u2 ->
                                          case l1 of wild11 { GHC.Types.I# m ->
                                          case u1 of wild12 { GHC.Types.I# n ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# m x) of wild13 {
                                            GHC.Types.False
                                            -> case GHC.Arr.hopelessIndexError
                                               ret_ty (GHC.Base.Maybe TicTacToeEngine.Board)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<=# x n) of wild14 {
                                                 GHC.Types.False
                                                 -> case GHC.Arr.hopelessIndexError
                                                    ret_ty (GHC.Base.Maybe TicTacToeEngine.Board)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case l2 of wild15 { GHC.Types.I# m1 ->
                                                    case u2 of wild16 { GHC.Types.I# n1 ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<=# m1 x1) of wild17 {
                                                      GHC.Types.False
                                                      -> case GHC.Arr.hopelessIndexError
                                                         ret_ty (GHC.Base.Maybe
                                                                   TicTacToeEngine.Board)
                                                         of {}
                                                      GHC.Types.True
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.<=# x1 n1) of wild18 {
                                                           GHC.Types.False
                                                           -> case GHC.Arr.hopelessIndexError
                                                              ret_ty (GHC.Base.Maybe
                                                                        TicTacToeEngine.Board)
                                                              of {}
                                                           GHC.Types.True
                                                           -> case GHC.Prim.indexArray#
                                                                     @ TicTacToeEngine.Field
                                                                     ds3
                                                                     (GHC.Prim.+#
                                                                        (GHC.Prim.*#
                                                                           (GHC.Prim.-# x m)
                                                                           (GHC.Prim.+#
                                                                              (GHC.Prim.-# n1 m1)
                                                                              1#))
                                                                        (GHC.Prim.-#
                                                                           x1
                                                                           m1)) of ds4 { Unit# ipv ->
                                                              case ipv of wild19 {
                                                                TicTacToeEngine.Empty
                                                                -> GHC.Base.Just
                                                                     @ (GHC.Arr.Array
                                                                          (GHC.Types.Int,
                                                                           GHC.Types.Int)
                                                                          TicTacToeEngine.Field)
                                                                     (case GHC.Magic.runRW#
                                                                             @ ('GHC.Types.TupleRep
                                                                                  '['GHC.Types.TupleRep
                                                                                      '[],
                                                                                    'GHC.Types.LiftedRep])
                                                                             @ (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  GHC.Arr.Array
                                                                                    (GHC.Types.Int,
                                                                                     GHC.Types.Int)
                                                                                    TicTacToeEngine.Field #)
                                                                             (\ (s1 :: GHC.Prim.State#
                                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                                              case GHC.Prim.newArray#
                                                                                     @ TicTacToeEngine.Field
                                                                                     @ GHC.Prim.RealWorld
                                                                                     dt
                                                                                     (GHC.Arr.arrEleBottom
                                                                                        @ TicTacToeEngine.Field)
                                                                                     s1 of ds5 { (#,#) ipv1 ipv2 ->
                                                                              letrec {
                                                                                copy :: GHC.Prim.Int#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Arr.Array
                                                                                                (GHC.Types.Int,
                                                                                                 GHC.Types.Int)
                                                                                                TicTacToeEngine.Field #)
                                                                                  <join 2> {- Arity: 2,
                                                                                              Strictness: <S,U><S,U> -}
                                                                                = \ (i# :: GHC.Prim.Int#)
                                                                                    (s3# :: GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld) ->
                                                                                  case GHC.Prim.tagToEnum#
                                                                                         @ GHC.Types.Bool
                                                                                         (GHC.Prim.==#
                                                                                            i#
                                                                                            dt) of wild20 {
                                                                                    GHC.Types.False
                                                                                    -> case GHC.Prim.indexArray#
                                                                                              @ TicTacToeEngine.Field
                                                                                              ds3
                                                                                              i# of ds6 { Unit# ipv3 ->
                                                                                       case GHC.Prim.writeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              i#
                                                                                              ipv3
                                                                                              s3# of s4# { DEFAULT ->
                                                                                       copy
                                                                                         (GHC.Prim.+#
                                                                                            i#
                                                                                            1#)
                                                                                         s4# } }
                                                                                    GHC.Types.True
                                                                                    -> case GHC.Prim.writeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              (GHC.Prim.+#
                                                                                                 (GHC.Prim.*#
                                                                                                    (GHC.Prim.-#
                                                                                                       x
                                                                                                       m)
                                                                                                    (GHC.Prim.+#
                                                                                                       (GHC.Prim.-#
                                                                                                          n1
                                                                                                          m1)
                                                                                                       1#))
                                                                                                 (GHC.Prim.-#
                                                                                                    x1
                                                                                                    m1))
                                                                                              wild
                                                                                              s3# of s2# { DEFAULT ->
                                                                                       case GHC.Prim.unsafeFreezeArray#
                                                                                              @ GHC.Prim.RealWorld
                                                                                              @ TicTacToeEngine.Field
                                                                                              ipv2
                                                                                              s2# of ds6 { (#,#) ipv3 ipv4 ->
                                                                                       (# ipv3,
                                                                                          GHC.Arr.Array
                                                                                            @ (GHC.Types.Int,
                                                                                               GHC.Types.Int)
                                                                                            @ TicTacToeEngine.Field
                                                                                            wild9
                                                                                            wild10
                                                                                            dt
                                                                                            ipv4 #) } } }
                                                                              } in
                                                                              copy
                                                                                0#
                                                                                ipv1 }) of ds5 { (#,#) ipv1 ipv2 ->
                                                                      ipv2 })
                                                                TicTacToeEngine.Cross
                                                                -> GHC.Base.Nothing
                                                                     @ TicTacToeEngine.Board
                                                                TicTacToeEngine.Circle
                                                                -> GHC.Base.Nothing
                                                                     @ TicTacToeEngine.Board } } } } } } } } } } } } } } } } } } } }
                   TicTacToeEngine.Empty
                   -> GHC.Base.Nothing @ TicTacToeEngine.Board }) -}
7141a3dfe78d198cbd8dd9a218bddd8b
  newBoard :: TicTacToeEngine.Board
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             GHC.Arr.Array
                               (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field #)
                        TicTacToeEngine.newBoard1 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
b164a2f29cf5e085c71430c781b0c582
  newBoard1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Arr.Array
            (GHC.Types.Int, GHC.Types.Int) TicTacToeEngine.Field #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1# :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ TicTacToeEngine.Field
                        @ GHC.Prim.RealWorld
                        9#
                        (GHC.Arr.arrEleBottom @ TicTacToeEngine.Field)
                        s1# of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        0#
                        TicTacToeEngine.Empty
                        ipv of s4# { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        1#
                        TicTacToeEngine.Empty
                        s4# of s4#1 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        2#
                        TicTacToeEngine.Empty
                        s4#1 of s4#2 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        3#
                        TicTacToeEngine.Empty
                        s4#2 of s4#3 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        4#
                        TicTacToeEngine.Empty
                        s4#3 of s4#4 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        5#
                        TicTacToeEngine.Empty
                        s4#4 of s4#5 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        6#
                        TicTacToeEngine.Empty
                        s4#5 of s4#6 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        7#
                        TicTacToeEngine.Empty
                        s4#6 of s4#7 { DEFAULT ->
                 case GHC.Prim.writeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        8#
                        TicTacToeEngine.Empty
                        s4#7 of wild4 { DEFAULT ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ TicTacToeEngine.Field
                        ipv1
                        wild4 of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Arr.Array
                      @ (GHC.Types.Int, GHC.Types.Int)
                      @ TicTacToeEngine.Field
                      TicTacToeEngine.newBoard_l
                      TicTacToeEngine.newBoard_u
                      9#
                      ipv3 #) } } } } } } } } } } }) -}
3bab758a9612c8729d2b46609516b097
  newBoard2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
e3cc5de8f77acc48626f513584aa3b38
  newBoard3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
55137f42a35df944d5e09d3a2c493367
  newBoard_l :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard3,
                  TicTacToeEngine.newBoard3)) -}
e0b1cfcdfff71db3392ef84f3ad37219
  newBoard_u :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard2,
                  TicTacToeEngine.newBoard2)) -}
5167423478462095b9c24146fddee054
  seeGameStatus ::
    TicTacToeEngine.Board -> TicTacToeEngine.GameStatus
  {- Arity: 1, Strictness: <L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)>,
     Unfolding: (\ (board :: TicTacToeEngine.Board) ->
                 case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                        TicTacToeEngine.Cross
                        board
                        TicTacToeEngine.seeGameStatus15 of wild {
                   GHC.Types.False
                   -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                             TicTacToeEngine.Cross
                             board
                             TicTacToeEngine.seeGameStatus14 of wild1 {
                        GHC.Types.False
                        -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                  TicTacToeEngine.Cross
                                  board
                                  TicTacToeEngine.seeGameStatus2 of wild2 {
                             GHC.Types.False
                             -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                       TicTacToeEngine.Circle
                                       board
                                       TicTacToeEngine.seeGameStatus15 of wild3 {
                                  GHC.Types.False
                                  -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                            TicTacToeEngine.Circle
                                            board
                                            TicTacToeEngine.seeGameStatus14 of wild4 {
                                       GHC.Types.False
                                       -> case TicTacToeEngine.seeGameStatus_checkIfAnyEqual
                                                 TicTacToeEngine.Circle
                                                 board
                                                 TicTacToeEngine.seeGameStatus2 of wild5 {
                                            GHC.Types.False
                                            -> case board of wild6 { GHC.Arr.Array ds ds1 dt ds2 ->
                                               let {
                                                 y :: GHC.Prim.Int# = GHC.Prim.-# dt 1#
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.># 0# y) of wild7 {
                                                 GHC.Types.False
                                                 -> letrec {
                                                      go :: GHC.Prim.Int# -> [TicTacToeEngine.Field]
                                                        {- Arity: 1, Strictness: <L,U> -}
                                                      = \ (x :: GHC.Prim.Int#) ->
                                                        GHC.Types.:
                                                          @ TicTacToeEngine.Field
                                                          (case GHC.Prim.indexArray#
                                                                  @ TicTacToeEngine.Field
                                                                  ds2
                                                                  x of ds5 { Unit# ipv ->
                                                           ipv })
                                                          (case GHC.Prim.tagToEnum#
                                                                  @ GHC.Types.Bool
                                                                  (GHC.Prim.==# x y) of wild8 {
                                                             GHC.Types.False
                                                             -> go (GHC.Prim.+# x 1#)
                                                             GHC.Types.True
                                                             -> GHC.Types.[]
                                                                  @ TicTacToeEngine.Field })
                                                    } in
                                                    case TicTacToeEngine.seeGameStatus_allFilledOnList
                                                           (go 0#) of wild8 {
                                                      GHC.Types.False -> TicTacToeEngine.InProgress
                                                      GHC.Types.True -> TicTacToeEngine.Stalemate }
                                                 GHC.Types.True
                                                 -> case TicTacToeEngine.seeGameStatus1 of wild8 {
                                                      GHC.Types.False -> TicTacToeEngine.InProgress
                                                      GHC.Types.True
                                                      -> TicTacToeEngine.Stalemate } } }
                                            GHC.Types.True -> TicTacToeEngine.CircleWon }
                                       GHC.Types.True -> TicTacToeEngine.CircleWon }
                                  GHC.Types.True -> TicTacToeEngine.CircleWon }
                             GHC.Types.True -> TicTacToeEngine.CrossWon }
                        GHC.Types.True -> TicTacToeEngine.CrossWon }
                   GHC.Types.True -> TicTacToeEngine.CrossWon }) -}
bd62f50022ab67474b0f366094ac5d40
  seeGameStatus1 :: GHC.Types.Bool
  {- Unfolding: (TicTacToeEngine.seeGameStatus_allFilledOnList
                   (GHC.Types.[] @ TicTacToeEngine.Field)) -}
2f48d3ba068446ca219e847768f24267
  seeGameStatus10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard3,
                  TicTacToeEngine.newBoard2)) -}
ab4711b03719d93b51f8ecf96d83e85e
  seeGameStatus11 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.newBoard_l
                   TicTacToeEngine.seeGameStatus12) -}
340c00bfb5c276843b2fc305ba3fabf2
  seeGameStatus12 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus8
                   TicTacToeEngine.seeGameStatus13) -}
a3ad7dcb591a23d33d1104cfa4f5ede7
  seeGameStatus13 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.newBoard_u
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
166aef6cd7cd7d924b321a467ccbaf1c
  seeGameStatus14 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (case TicTacToeEngine.$wgo
                        0# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [(GHC.Types.Int, GHC.Types.Int)] ww1 ww2 }) -}
1d33275f3ae90f0773879cb318332091
  seeGameStatus15 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- Unfolding: (case TicTacToeEngine.$wgo1
                        0# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ [(GHC.Types.Int, GHC.Types.Int)] ww1 ww2 }) -}
c8683831ba4c47860df0fa301f224c6c
  seeGameStatus2 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   TicTacToeEngine.seeGameStatus11
                   TicTacToeEngine.seeGameStatus3) -}
7dc2c64ac9b58902793ee9bff9a1e7e2
  seeGameStatus3 :: [[(GHC.Types.Int, GHC.Types.Int)]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [(GHC.Types.Int, GHC.Types.Int)]
                   TicTacToeEngine.seeGameStatus4
                   (GHC.Types.[] @ [(GHC.Types.Int, GHC.Types.Int)])) -}
803206851ba01d2c5b05b79c4509df8a
  seeGameStatus4 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus10
                   TicTacToeEngine.seeGameStatus5) -}
be4a460a43bf395e1e8e9e8c5f974d05
  seeGameStatus5 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus8
                   TicTacToeEngine.seeGameStatus6) -}
df058645c24114672c9ad0f5ec5d186e
  seeGameStatus6 :: [(GHC.Types.Int, GHC.Types.Int)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, GHC.Types.Int)
                   TicTacToeEngine.seeGameStatus7
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
d33c1bd4db9694385755ac1c456200b5
  seeGameStatus7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.newBoard2,
                  TicTacToeEngine.newBoard3)) -}
4b32e435e748601a36456c048afce245
  seeGameStatus8 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((TicTacToeEngine.seeGameStatus9,
                  TicTacToeEngine.seeGameStatus9)) -}
def659779faee2233fbada83a8e38b19
  seeGameStatus9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
37db48b8492faf35277d54668dd717b1
  seeGameStatus_allFilledOnList ::
    [TicTacToeEngine.Field] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fa309a80b5572c62918eb94dbbecfac6
  seeGameStatus_checkIfAnyEqual ::
    TicTacToeEngine.Field
    -> TicTacToeEngine.Board
    -> [[(GHC.Types.Int, GHC.Types.Int)]]
    -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U><L,U(U(U(U),U(U)),U(U(U),U(U)),A,U)><S,1*U> -}
instance [safe] GHC.Classes.Eq [TicTacToeEngine.Field]
  = TicTacToeEngine.$fEqField
instance [safe] GHC.Classes.Eq [TicTacToeEngine.GameStatus]
  = TicTacToeEngine.$fEqGameStatus
instance [safe] GHC.Show.Show [TicTacToeEngine.Field]
  = TicTacToeEngine.$fShowField
instance [safe] GHC.Show.Show [TicTacToeEngine.GameStatus]
  = TicTacToeEngine.$fShowGameStatus
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

